# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "ci" ]
  pull_request:
    branches: [ "ci" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 2.7.18
      uses: actions/setup-python@v3
      with:
        python-version: "2.7.18"
    - name: Install OneFLUX
      run: |
        # python -m pip install --upgrade pip
        # pip install flake8 pytest
        # if [ -f frozen-requirement.txt ]; then pip install -r frozen-requirements.txt; fi
        make
    - name: Get data
      run: |
        mkdir datadir
        # get necessary data
        wget ftp://ftp.fluxdata.org/.ameriflux_downloads/.test/US-ARc_sample_input.zip
        wget ftp://ftp.fluxdata.org/.ameriflux_downloads/.test/US-ARc_sample_output.zip
        unzip US-ARc_sample_input.zip -d ./datadir/test_input/
        unzip US-ARc_sample_output.zip -d ./datadir/test_output/

    - name: Run OneFLUX partitioning_nt
      run: |
        # copy necessary output data to force partitioning_nt to run
        cp -r ./datadir/test_output/US-ARc_sample_output/02_qc_auto/ ./datadir/test_input/US-ARc_sample_input/
        cp -r ./datadir/test_output/US-ARc_sample_output/07_meteo_proc/ ./datadir/test_input/US-ARc_sample_input/
        cp -r ./datadir/test_output/US-ARc_sample_output/08_nee_proc/ ./datadir/test_input/US-ARc_sample_input/
        python runoneflux.py partition_nt ./datadir/test_input/ US-ARc US-ARc_sample_input 2005 2006 -l fluxnet_pipeline_US-ARc.log --recint hh

    - name: Run pytest
      run: |
        pytest oneflux/tools/partition_nt.py



    # - name: Lint with flake8
    #   run: |
    #     # stop the build if there are Python syntax errors or undefined names
    #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    # - name: Test with pytest
    #   run: |
    #     pytest
